
ll := import("@platforma-sdk/workflow-tengo:ll")
self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pColumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
json := import("json")

self.defineOutputs("pf")

tsvImportParams := {
	"axes": [
		{
			column: "sample",
			preProcess: [{
				type: "regexpReplace",
				pattern: "^(.*)\\.clns$",
				replacement: "$1"
			}]
			/* spec: sampleId spec must be set outside */
		},
		{
			column: "metric",
			spec: {
				name: "pl7.app/vdj/diversityMeasure",
				type: "String",
				annotations: {
					"pl7.app/axisNature": "heterogeneous",
					"pl7.app/label": "Diversity measure"
				}
			}
		}
		],
	columns: [
		{
			column: "value",
			id: "value",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/diversity",
				valueType: "Float",
				annotations: {
					"pl7.app/label": "Repertoire Diversity"
				}
			}
		}
		],
	storageFormat: "Binary",
	partitionKeyLength: 0
}

FILE_NAME_PREFIX_LEN := len("r.diversity.")
FILE_NAME_SUFFIX_LEN := len(".tsv")

self.body(func(args) {

	tsvMap := pColumn.resourceMapBuilder(/* key length*/ 1 )
	for fileName, file in args.tsv {
		chain := fileName[FILE_NAME_PREFIX_LEN:(len(fileName) - FILE_NAME_SUFFIX_LEN)]
		tsvMap.add([chain], file)
	}
	tsvMap = tsvMap.build()

	spec := tsvImportParams
	spec.axes[0].spec = args.sampleIdAxisSpec

	pf := xsv.importFileMap(tsvMap, "tsv", spec, {
		additionalAxesSpec: [
			{
				"name": "pl7.app/vdj/chain",
				"type": "String",
				"annotations": {
					"pl7.app/label": "Chain",
					"pl7.app/axisNature": "scaleCompatible"
				}
			}
			],
		transpose: {
			pAxisIdx: 0,
			pAxisNameOverride: "sample",
			sAxisName: "metric",
			valueName: "value"
		}
	})

	return {
		pf: pf
	}
})

// mixcr postanalysis individual # diversity

self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
times := import("times")
json := import("json")

mixcrSw := assets.importSoftware("@milaboratory/mixcr:main")

self.defineOutputs("tsv")

self.body(func(args) {
	clns := args.clns.data

	filesMap := {}
	for k, v in clns.inputs() {
		filesMap[json.decode(k)[0]] = v
	}

	cmdBuilder := exec.builder().
		software(mixcrSw).
		arg("postanalysis").
		arg("individual").
		arg("--default-downsampling").arg(args.downsampling).
		arg("--default-weight-function").arg(args.weight)
	
	if args.dropOutliers == true {
		cmdBuilder = cmdBuilder.arg("--drop-outliers")
	}

	if args.onlyProductive == true {
		cmdBuilder = cmdBuilder.arg("--only-productive")
	}

	for name, f in filesMap {
		cmdBuilder = cmdBuilder.arg(name + ".clns")
	}
	cmdBuilder = cmdBuilder.arg("r.json")

	for name, f in filesMap {
		cmdBuilder = cmdBuilder.addFile(name + ".clns", f)
	}

	cmdBuilder = cmdBuilder.saveFileSet("diversityTsv", "^r\\.diversity\\..*\\.tsv$")

	cmdBuilder = cmdBuilder.cache(48 * times.hour);
	
	run := cmdBuilder.run()

	return {
		tsv: run.getFileSet("diversityTsv")
	}
})
